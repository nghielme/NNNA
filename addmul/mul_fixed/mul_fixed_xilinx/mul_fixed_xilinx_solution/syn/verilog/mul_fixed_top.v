// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mul_fixed_top_mul_fixed_top,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=50.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=35.715667,HLS_SYN_LAT=37,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=4463,HLS_SYN_LUT=14517,HLS_VERSION=2022_2}" *)

module mul_fixed_top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a,
        b,
        res,
        res_ap_vld
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [319:0] a;
input  [319:0] b;
output  [319:0] res;
output   res_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg res_ap_vld;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [280:0] trunc_ln6_fu_180_p1;
reg   [280:0] trunc_ln6_reg_229;
wire   [280:0] trunc_ln6_1_fu_185_p1;
reg   [280:0] trunc_ln6_1_reg_234;
wire    ap_CS_fsm_state3;
wire   [31:0] ref_tmp1_i_q0;
reg   [31:0] hw_reg_249;
wire    ap_CS_fsm_state4;
reg   [5:0] lshr_ln_reg_254;
wire   [31:0] ref_tmp1_i_q1;
reg   [31:0] hw_1_reg_269;
wire    ap_CS_fsm_state5;
reg   [31:0] hw_2_reg_274;
reg   [31:0] hw_3_reg_289;
wire    ap_CS_fsm_state6;
reg   [31:0] hw_4_reg_294;
reg   [31:0] hw_5_reg_309;
wire    ap_CS_fsm_state7;
reg   [31:0] hw_6_reg_314;
reg   [4:0] ref_tmp1_i_address0;
reg    ref_tmp1_i_ce0;
reg    ref_tmp1_i_we0;
reg   [4:0] ref_tmp1_i_address1;
reg    ref_tmp1_i_ce1;
reg    ref_tmp1_i_we1;
wire    grp_operator_mul_281_127_true_0_0_fu_172_ap_start;
wire    grp_operator_mul_281_127_true_0_0_fu_172_ap_done;
wire    grp_operator_mul_281_127_true_0_0_fu_172_ap_idle;
wire    grp_operator_mul_281_127_true_0_0_fu_172_ap_ready;
wire   [4:0] grp_operator_mul_281_127_true_0_0_fu_172_agg_result_address0;
wire    grp_operator_mul_281_127_true_0_0_fu_172_agg_result_ce0;
wire    grp_operator_mul_281_127_true_0_0_fu_172_agg_result_we0;
wire   [31:0] grp_operator_mul_281_127_true_0_0_fu_172_agg_result_d0;
wire   [4:0] grp_operator_mul_281_127_true_0_0_fu_172_agg_result_address1;
wire    grp_operator_mul_281_127_true_0_0_fu_172_agg_result_ce1;
wire    grp_operator_mul_281_127_true_0_0_fu_172_agg_result_we1;
wire   [31:0] grp_operator_mul_281_127_true_0_0_fu_172_agg_result_d1;
reg    grp_operator_mul_281_127_true_0_0_fu_172_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state8;
wire   [18:0] trunc_ln1911_fu_200_p1;
wire   [280:0] tmp_fu_204_p11;
wire  signed [287:0] sext_ln6_fu_220_p1;
reg   [7:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 grp_operator_mul_281_127_true_0_0_fu_172_ap_start_reg = 1'b0;
end

mul_fixed_top_ref_tmp1_i_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
ref_tmp1_i_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(ref_tmp1_i_address0),
    .ce0(ref_tmp1_i_ce0),
    .we0(ref_tmp1_i_we0),
    .d0(grp_operator_mul_281_127_true_0_0_fu_172_agg_result_d0),
    .q0(ref_tmp1_i_q0),
    .address1(ref_tmp1_i_address1),
    .ce1(ref_tmp1_i_ce1),
    .we1(ref_tmp1_i_we1),
    .d1(grp_operator_mul_281_127_true_0_0_fu_172_agg_result_d1),
    .q1(ref_tmp1_i_q1)
);

mul_fixed_top_operator_mul_281_127_true_0_0 grp_operator_mul_281_127_true_0_0_fu_172(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_operator_mul_281_127_true_0_0_fu_172_ap_start),
    .ap_done(grp_operator_mul_281_127_true_0_0_fu_172_ap_done),
    .ap_idle(grp_operator_mul_281_127_true_0_0_fu_172_ap_idle),
    .ap_ready(grp_operator_mul_281_127_true_0_0_fu_172_ap_ready),
    .agg_result_address0(grp_operator_mul_281_127_true_0_0_fu_172_agg_result_address0),
    .agg_result_ce0(grp_operator_mul_281_127_true_0_0_fu_172_agg_result_ce0),
    .agg_result_we0(grp_operator_mul_281_127_true_0_0_fu_172_agg_result_we0),
    .agg_result_d0(grp_operator_mul_281_127_true_0_0_fu_172_agg_result_d0),
    .agg_result_address1(grp_operator_mul_281_127_true_0_0_fu_172_agg_result_address1),
    .agg_result_ce1(grp_operator_mul_281_127_true_0_0_fu_172_agg_result_ce1),
    .agg_result_we1(grp_operator_mul_281_127_true_0_0_fu_172_agg_result_we1),
    .agg_result_d1(grp_operator_mul_281_127_true_0_0_fu_172_agg_result_d1),
    .p_read(trunc_ln6_reg_229),
    .p_read1(trunc_ln6_1_reg_234)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_operator_mul_281_127_true_0_0_fu_172_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_operator_mul_281_127_true_0_0_fu_172_ap_start_reg <= 1'b1;
        end else if ((grp_operator_mul_281_127_true_0_0_fu_172_ap_ready == 1'b1)) begin
            grp_operator_mul_281_127_true_0_0_fu_172_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        hw_1_reg_269 <= ref_tmp1_i_q1;
        hw_2_reg_274 <= ref_tmp1_i_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        hw_3_reg_289 <= ref_tmp1_i_q1;
        hw_4_reg_294 <= ref_tmp1_i_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        hw_5_reg_309 <= ref_tmp1_i_q1;
        hw_6_reg_314 <= ref_tmp1_i_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        hw_reg_249 <= ref_tmp1_i_q0;
        lshr_ln_reg_254 <= {{ref_tmp1_i_q1[31:26]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        trunc_ln6_1_reg_234 <= trunc_ln6_1_fu_185_p1;
        trunc_ln6_reg_229 <= trunc_ln6_fu_180_p1;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_operator_mul_281_127_true_0_0_fu_172_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ref_tmp1_i_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ref_tmp1_i_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        ref_tmp1_i_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ref_tmp1_i_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        ref_tmp1_i_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        ref_tmp1_i_address0 = grp_operator_mul_281_127_true_0_0_fu_172_agg_result_address0;
    end else begin
        ref_tmp1_i_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ref_tmp1_i_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ref_tmp1_i_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        ref_tmp1_i_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ref_tmp1_i_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        ref_tmp1_i_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        ref_tmp1_i_address1 = grp_operator_mul_281_127_true_0_0_fu_172_agg_result_address1;
    end else begin
        ref_tmp1_i_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        ref_tmp1_i_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        ref_tmp1_i_ce0 = grp_operator_mul_281_127_true_0_0_fu_172_agg_result_ce0;
    end else begin
        ref_tmp1_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        ref_tmp1_i_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        ref_tmp1_i_ce1 = grp_operator_mul_281_127_true_0_0_fu_172_agg_result_ce1;
    end else begin
        ref_tmp1_i_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ref_tmp1_i_we0 = grp_operator_mul_281_127_true_0_0_fu_172_agg_result_we0;
    end else begin
        ref_tmp1_i_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ref_tmp1_i_we1 = grp_operator_mul_281_127_true_0_0_fu_172_agg_result_we1;
    end else begin
        ref_tmp1_i_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        res_ap_vld = 1'b1;
    end else begin
        res_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_operator_mul_281_127_true_0_0_fu_172_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign grp_operator_mul_281_127_true_0_0_fu_172_ap_start = grp_operator_mul_281_127_true_0_0_fu_172_ap_start_reg;

assign res = $unsigned(sext_ln6_fu_220_p1);

assign sext_ln6_fu_220_p1 = $signed(tmp_fu_204_p11);

assign tmp_fu_204_p11 = {{{{{{{{{{trunc_ln1911_fu_200_p1}, {ref_tmp1_i_q1}}, {hw_6_reg_314}}, {hw_5_reg_309}}, {hw_4_reg_294}}, {hw_3_reg_289}}, {hw_2_reg_274}}, {hw_1_reg_269}}, {hw_reg_249}}, {lshr_ln_reg_254}};

assign trunc_ln1911_fu_200_p1 = ref_tmp1_i_q0[18:0];

assign trunc_ln6_1_fu_185_p1 = b[280:0];

assign trunc_ln6_fu_180_p1 = a[280:0];

endmodule //mul_fixed_top
