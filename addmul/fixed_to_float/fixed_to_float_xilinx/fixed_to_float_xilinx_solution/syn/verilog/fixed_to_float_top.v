// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fixed_to_float_top_fixed_to_float_top,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=50.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=21.346750,HLS_SYN_LAT=5,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=235,HLS_SYN_LUT=1063,HLS_VERSION=2022_2}" *)

module fixed_to_float_top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        fixpo,
        flopo,
        flopo_ap_vld
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] fixpo;
output  [127:0] flopo;
output   flopo_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg flopo_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    grp_convert_ac_fixed_ac_float_25_2_8_0_s_fu_41_ap_start;
wire    grp_convert_ac_fixed_ac_float_25_2_8_0_s_fu_41_ap_done;
wire    grp_convert_ac_fixed_ac_float_25_2_8_0_s_fu_41_ap_idle;
wire    grp_convert_ac_fixed_ac_float_25_2_8_0_s_fu_41_ap_ready;
wire   [70:0] grp_convert_ac_fixed_ac_float_25_2_8_0_s_fu_41_ap_return;
reg    grp_convert_ac_fixed_ac_float_25_2_8_0_s_fu_41_ap_start_reg;
wire    ap_CS_fsm_state2;
wire  signed [95:0] sext_ln6_fu_49_p1;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 grp_convert_ac_fixed_ac_float_25_2_8_0_s_fu_41_ap_start_reg = 1'b0;
end

fixed_to_float_top_convert_ac_fixed_ac_float_25_2_8_0_s grp_convert_ac_fixed_ac_float_25_2_8_0_s_fu_41(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_convert_ac_fixed_ac_float_25_2_8_0_s_fu_41_ap_start),
    .ap_done(grp_convert_ac_fixed_ac_float_25_2_8_0_s_fu_41_ap_done),
    .ap_idle(grp_convert_ac_fixed_ac_float_25_2_8_0_s_fu_41_ap_idle),
    .ap_ready(grp_convert_ac_fixed_ac_float_25_2_8_0_s_fu_41_ap_ready),
    .from_v_v_read(fixpo),
    .ap_return(grp_convert_ac_fixed_ac_float_25_2_8_0_s_fu_41_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_convert_ac_fixed_ac_float_25_2_8_0_s_fu_41_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_convert_ac_fixed_ac_float_25_2_8_0_s_fu_41_ap_start_reg <= 1'b1;
        end else if ((grp_convert_ac_fixed_ac_float_25_2_8_0_s_fu_41_ap_ready == 1'b1)) begin
            grp_convert_ac_fixed_ac_float_25_2_8_0_s_fu_41_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_convert_ac_fixed_ac_float_25_2_8_0_s_fu_41_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_convert_ac_fixed_ac_float_25_2_8_0_s_fu_41_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_convert_ac_fixed_ac_float_25_2_8_0_s_fu_41_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((grp_convert_ac_fixed_ac_float_25_2_8_0_s_fu_41_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        flopo_ap_vld = 1'b1;
    end else begin
        flopo_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_convert_ac_fixed_ac_float_25_2_8_0_s_fu_41_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign flopo = $unsigned(sext_ln6_fu_49_p1);

assign grp_convert_ac_fixed_ac_float_25_2_8_0_s_fu_41_ap_start = grp_convert_ac_fixed_ac_float_25_2_8_0_s_fu_41_ap_start_reg;

assign sext_ln6_fu_49_p1 = $signed(grp_convert_ac_fixed_ac_float_25_2_8_0_s_fu_41_ap_return);

endmodule //fixed_to_float_top
