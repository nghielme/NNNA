-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fixed_to_float_top_convert_ac_fixed_ac_float_25_2_8_0_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    from_v_v_read : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (70 downto 0) );
end;


architecture behav of fixed_to_float_top_convert_ac_fixed_ac_float_25_2_8_0_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_1E : STD_LOGIC_VECTOR (6 downto 0) := "0011110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv32_FC000000 : STD_LOGIC_VECTOR (31 downto 0) := "11111100000000000000000000000000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv71_0 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tab_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal tab_ce0 : STD_LOGIC;
    signal tab_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal value_fu_172_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal value_reg_582 : STD_LOGIC_VECTOR (31 downto 0);
    signal value_1_fu_177_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal value_1_reg_589 : STD_LOGIC_VECTOR (31 downto 0);
    signal retval_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal retval_reg_595 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_163_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ext_sign_reg_599 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_convert_ac_fixed_ac_float_25_2_8_0_Pipeline_VITIS_LOOP_213_fu_154_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal targetBlock_reg_604 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln2118_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2118_reg_611 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln2122_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2122_reg_617 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2126_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2126_reg_622 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_convert_ac_fixed_ac_float_25_2_8_0_Pipeline_VITIS_LOOP_213_fu_154_ap_start : STD_LOGIC;
    signal grp_convert_ac_fixed_ac_float_25_2_8_0_Pipeline_VITIS_LOOP_213_fu_154_ap_done : STD_LOGIC;
    signal grp_convert_ac_fixed_ac_float_25_2_8_0_Pipeline_VITIS_LOOP_213_fu_154_ap_idle : STD_LOGIC;
    signal grp_convert_ac_fixed_ac_float_25_2_8_0_Pipeline_VITIS_LOOP_213_fu_154_ap_ready : STD_LOGIC;
    signal grp_convert_ac_fixed_ac_float_25_2_8_0_Pipeline_VITIS_LOOP_213_fu_154_k_2_out : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_convert_ac_fixed_ac_float_25_2_8_0_Pipeline_VITIS_LOOP_213_fu_154_k_2_out_ap_vld : STD_LOGIC;
    signal grp_convert_ac_fixed_ac_float_25_2_8_0_Pipeline_VITIS_LOOP_213_fu_154_select_ln678_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convert_ac_fixed_ac_float_25_2_8_0_Pipeline_VITIS_LOOP_213_fu_154_select_ln678_out_ap_vld : STD_LOGIC;
    signal add_ln2142_fu_361_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_phi_ln2142_phi_fu_127_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal phi_ln2142_reg_123 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal r_v_v_4_fu_510_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_f_m_v_v_phi_fu_137_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal f_m_v_v_reg_134 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub15_i_i_i_i_i_op_fu_519_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_value_6_phi_fu_147_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal value_6_reg_143 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_convert_ac_fixed_ac_float_25_2_8_0_Pipeline_VITIS_LOOP_213_fu_154_ap_start_reg : STD_LOGIC := '0';
    signal k_2_loc_fu_100 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln678_loc_fu_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln2130_fu_314_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln1034_fu_188_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln2116_fu_206_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_fu_212_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_1_fu_220_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln2118_fu_230_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_2_fu_240_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_3_fu_248_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln2122_fu_258_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_4_fu_268_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln2_fu_276_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_1_fu_292_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln2126_fu_302_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal t_5_fu_306_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln2118_1_fu_319_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln2125_fu_326_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln2122_1_fu_333_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln2126_fu_340_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln2126_1_fu_346_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln2116_fu_353_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln2130_1_fu_357_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln2142_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_373_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln609_1_fu_381_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln1_fu_387_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln609_fu_395_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln4_fu_401_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal s31_fu_415_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_439_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal value_8_fu_454_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal value_7_fu_447_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1794_1_fu_429_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub10_i_i_i_i_i_i_i_fu_468_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1794_fu_425_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1799_fu_474_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln1799_fu_490_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1799_fu_484_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal value_5_fu_496_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal value_4_fu_478_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1796_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_v_v_fu_460_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_v_v_1_fu_502_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln3157_fu_411_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln5_fu_526_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal retval_1_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln346_fu_546_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln609_fu_536_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_554_p4 : STD_LOGIC_VECTOR (70 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fixed_to_float_top_convert_ac_fixed_ac_float_25_2_8_0_Pipeline_VITIS_LOOP_213 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        value_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        value_r : IN STD_LOGIC_VECTOR (31 downto 0);
        sext_ln2137 : IN STD_LOGIC_VECTOR (0 downto 0);
        k_2_out : OUT STD_LOGIC_VECTOR (0 downto 0);
        k_2_out_ap_vld : OUT STD_LOGIC;
        select_ln678_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        select_ln678_out_ap_vld : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fixed_to_float_top_convert_ac_fixed_ac_float_25_2_8_0_s_tab_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;



begin
    tab_U : component fixed_to_float_top_convert_ac_fixed_ac_float_25_2_8_0_s_tab_ROM_AUTO_1R
    generic map (
        DataWidth => 3,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tab_address0,
        ce0 => tab_ce0,
        q0 => tab_q0);

    grp_convert_ac_fixed_ac_float_25_2_8_0_Pipeline_VITIS_LOOP_213_fu_154 : component fixed_to_float_top_convert_ac_fixed_ac_float_25_2_8_0_Pipeline_VITIS_LOOP_213
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_convert_ac_fixed_ac_float_25_2_8_0_Pipeline_VITIS_LOOP_213_fu_154_ap_start,
        ap_done => grp_convert_ac_fixed_ac_float_25_2_8_0_Pipeline_VITIS_LOOP_213_fu_154_ap_done,
        ap_idle => grp_convert_ac_fixed_ac_float_25_2_8_0_Pipeline_VITIS_LOOP_213_fu_154_ap_idle,
        ap_ready => grp_convert_ac_fixed_ac_float_25_2_8_0_Pipeline_VITIS_LOOP_213_fu_154_ap_ready,
        value_1 => value_1_reg_589,
        value_r => value_reg_582,
        sext_ln2137 => ext_sign_reg_599,
        k_2_out => grp_convert_ac_fixed_ac_float_25_2_8_0_Pipeline_VITIS_LOOP_213_fu_154_k_2_out,
        k_2_out_ap_vld => grp_convert_ac_fixed_ac_float_25_2_8_0_Pipeline_VITIS_LOOP_213_fu_154_k_2_out_ap_vld,
        select_ln678_out => grp_convert_ac_fixed_ac_float_25_2_8_0_Pipeline_VITIS_LOOP_213_fu_154_select_ln678_out,
        select_ln678_out_ap_vld => grp_convert_ac_fixed_ac_float_25_2_8_0_Pipeline_VITIS_LOOP_213_fu_154_select_ln678_out_ap_vld,
        ap_return => grp_convert_ac_fixed_ac_float_25_2_8_0_Pipeline_VITIS_LOOP_213_fu_154_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg(0) <= '0';
                ap_return_preg(1) <= '0';
                ap_return_preg(2) <= '0';
                ap_return_preg(3) <= '0';
                ap_return_preg(4) <= '0';
                ap_return_preg(5) <= '0';
                ap_return_preg(6) <= '0';
                ap_return_preg(7) <= '0';
                ap_return_preg(8) <= '0';
                ap_return_preg(9) <= '0';
                ap_return_preg(10) <= '0';
                ap_return_preg(11) <= '0';
                ap_return_preg(12) <= '0';
                ap_return_preg(13) <= '0';
                ap_return_preg(14) <= '0';
                ap_return_preg(15) <= '0';
                ap_return_preg(16) <= '0';
                ap_return_preg(17) <= '0';
                ap_return_preg(18) <= '0';
                ap_return_preg(19) <= '0';
                ap_return_preg(20) <= '0';
                ap_return_preg(21) <= '0';
                ap_return_preg(22) <= '0';
                ap_return_preg(23) <= '0';
                ap_return_preg(24) <= '0';
                ap_return_preg(25) <= '0';
                ap_return_preg(26) <= '0';
                ap_return_preg(27) <= '0';
                ap_return_preg(28) <= '0';
                ap_return_preg(29) <= '0';
                ap_return_preg(30) <= '0';
                ap_return_preg(31) <= '0';
                ap_return_preg(64) <= '0';
                ap_return_preg(65) <= '0';
                ap_return_preg(66) <= '0';
                ap_return_preg(67) <= '0';
                ap_return_preg(68) <= '0';
                ap_return_preg(69) <= '0';
                ap_return_preg(70) <= '0';
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                                        ap_return_preg(31 downto 0) <= tmp_fu_554_p4(31 downto 0);                    ap_return_preg(70 downto 64) <= tmp_fu_554_p4(70 downto 64);
                end if; 
            end if;
        end if;
    end process;


    grp_convert_ac_fixed_ac_float_25_2_8_0_Pipeline_VITIS_LOOP_213_fu_154_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_convert_ac_fixed_ac_float_25_2_8_0_Pipeline_VITIS_LOOP_213_fu_154_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (retval_fu_194_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_convert_ac_fixed_ac_float_25_2_8_0_Pipeline_VITIS_LOOP_213_fu_154_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_convert_ac_fixed_ac_float_25_2_8_0_Pipeline_VITIS_LOOP_213_fu_154_ap_ready = ap_const_logic_1)) then 
                    grp_convert_ac_fixed_ac_float_25_2_8_0_Pipeline_VITIS_LOOP_213_fu_154_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    f_m_v_v_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (retval_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_m_v_v_reg_134 <= from_v_v_read;
            elsif (((retval_reg_595 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                f_m_v_v_reg_134 <= r_v_v_4_fu_510_p3;
            end if; 
        end if;
    end process;

    phi_ln2142_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((targetBlock_reg_604 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_ln2142_reg_123 <= ap_const_lv6_0;
            elsif (((targetBlock_reg_604 = ap_const_lv1_0) and (retval_reg_595 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_ln2142_reg_123 <= add_ln2142_fu_361_p2;
            end if; 
        end if;
    end process;

    value_6_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (retval_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                value_6_reg_143 <= ap_const_lv7_1E;
            elsif (((retval_reg_595 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                value_6_reg_143 <= sub15_i_i_i_i_i_op_fu_519_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((retval_fu_194_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                ext_sign_reg_599 <= from_v_v_read(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((targetBlock_reg_604 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                icmp_ln2118_reg_611 <= icmp_ln2118_fu_234_p2;
                icmp_ln2122_reg_617 <= icmp_ln2122_fu_262_p2;
                icmp_ln2126_reg_622 <= icmp_ln2126_fu_286_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_convert_ac_fixed_ac_float_25_2_8_0_Pipeline_VITIS_LOOP_213_fu_154_k_2_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                k_2_loc_fu_100 <= grp_convert_ac_fixed_ac_float_25_2_8_0_Pipeline_VITIS_LOOP_213_fu_154_k_2_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                retval_reg_595 <= retval_fu_194_p2;
                value_1_reg_589 <= from_v_v_read(63 downto 32);
                value_reg_582 <= value_fu_172_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_convert_ac_fixed_ac_float_25_2_8_0_Pipeline_VITIS_LOOP_213_fu_154_select_ln678_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                select_ln678_loc_fu_96 <= grp_convert_ac_fixed_ac_float_25_2_8_0_Pipeline_VITIS_LOOP_213_fu_154_select_ln678_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                targetBlock_reg_604 <= grp_convert_ac_fixed_ac_float_25_2_8_0_Pipeline_VITIS_LOOP_213_fu_154_ap_return;
            end if;
        end if;
    end process;
    ap_return_preg(63 downto 32) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, retval_fu_194_p2, ap_CS_fsm_state2, grp_convert_ac_fixed_ac_float_25_2_8_0_Pipeline_VITIS_LOOP_213_fu_154_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (retval_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif (((ap_start = ap_const_logic_1) and (retval_fu_194_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_convert_ac_fixed_ac_float_25_2_8_0_Pipeline_VITIS_LOOP_213_fu_154_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln2142_fu_361_p2 <= std_logic_vector(unsigned(zext_ln2116_fu_353_p1) + unsigned(zext_ln2130_1_fu_357_p1));
    add_ln609_1_fu_381_p2 <= std_logic_vector(unsigned(shl_ln_fu_373_p3) + unsigned(ap_phi_mux_phi_ln2142_phi_fu_127_p4));
    add_ln609_fu_395_p2 <= std_logic_vector(unsigned(shl_ln1_fu_387_p3) + unsigned(ap_const_lv32_FC000000));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_convert_ac_fixed_ac_float_25_2_8_0_Pipeline_VITIS_LOOP_213_fu_154_ap_done)
    begin
        if ((grp_convert_ac_fixed_ac_float_25_2_8_0_Pipeline_VITIS_LOOP_213_fu_154_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_f_m_v_v_phi_fu_137_p4_assign_proc : process(retval_reg_595, ap_CS_fsm_state4, r_v_v_4_fu_510_p3, f_m_v_v_reg_134)
    begin
        if (((retval_reg_595 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_phi_mux_f_m_v_v_phi_fu_137_p4 <= r_v_v_4_fu_510_p3;
        else 
            ap_phi_mux_f_m_v_v_phi_fu_137_p4 <= f_m_v_v_reg_134;
        end if; 
    end process;


    ap_phi_mux_phi_ln2142_phi_fu_127_p4_assign_proc : process(retval_reg_595, targetBlock_reg_604, add_ln2142_fu_361_p2, phi_ln2142_reg_123, ap_CS_fsm_state4)
    begin
        if (((targetBlock_reg_604 = ap_const_lv1_0) and (retval_reg_595 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_phi_mux_phi_ln2142_phi_fu_127_p4 <= add_ln2142_fu_361_p2;
        else 
            ap_phi_mux_phi_ln2142_phi_fu_127_p4 <= phi_ln2142_reg_123;
        end if; 
    end process;


    ap_phi_mux_value_6_phi_fu_147_p4_assign_proc : process(retval_reg_595, ap_CS_fsm_state4, sub15_i_i_i_i_i_op_fu_519_p2, value_6_reg_143)
    begin
        if (((retval_reg_595 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_phi_mux_value_6_phi_fu_147_p4 <= sub15_i_i_i_i_i_op_fu_519_p2;
        else 
            ap_phi_mux_value_6_phi_fu_147_p4 <= value_6_reg_143;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state4, tmp_fu_554_p4, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_return <= tmp_fu_554_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    grp_convert_ac_fixed_ac_float_25_2_8_0_Pipeline_VITIS_LOOP_213_fu_154_ap_start <= grp_convert_ac_fixed_ac_float_25_2_8_0_Pipeline_VITIS_LOOP_213_fu_154_ap_start_reg;
    grp_fu_163_p3 <= from_v_v_read(63 downto 63);
    icmp_ln1796_fu_433_p2 <= "1" when (s31_fu_415_p4 = ap_const_lv5_0) else "0";
    icmp_ln2118_fu_234_p2 <= "0" when (t_1_fu_220_p4 = ap_const_lv16_0) else "1";
    icmp_ln2122_fu_262_p2 <= "0" when (t_3_fu_248_p4 = ap_const_lv24_0) else "1";
    icmp_ln2126_fu_286_p2 <= "0" when (trunc_ln2_fu_276_p4 = ap_const_lv28_0) else "1";
    lshr_ln1799_fu_490_p2 <= std_logic_vector(shift_right(unsigned(value_7_fu_447_p3),to_integer(unsigned('0' & zext_ln1799_fu_474_p1(31-1 downto 0)))));
    or_ln1034_fu_188_p2 <= (value_fu_172_p1 or value_1_fu_177_p4);
    or_ln2126_fu_340_p2 <= (select_ln2122_1_fu_333_p3 or ap_const_lv5_4);
    r_v_v_1_fu_502_p3 <= (value_5_fu_496_p2 & value_4_fu_478_p2);
    r_v_v_4_fu_510_p3 <= 
        r_v_v_fu_460_p3 when (icmp_ln1796_fu_433_p2(0) = '1') else 
        r_v_v_1_fu_502_p3;
    r_v_v_fu_460_p3 <= (value_8_fu_454_p3 & value_7_fu_447_p3);
    retval_1_fu_540_p2 <= "1" when (trunc_ln5_fu_526_p4 = ap_const_lv25_0) else "0";
    retval_fu_194_p2 <= "1" when (or_ln1034_fu_188_p2 = ap_const_lv32_0) else "0";
    s31_fu_415_p4 <= add_ln609_fu_395_p2(30 downto 26);
    select_ln2118_1_fu_319_p3 <= 
        ap_const_lv5_0 when (icmp_ln2118_reg_611(0) = '1') else 
        ap_const_lv5_10;
    select_ln2122_1_fu_333_p3 <= 
        select_ln2118_1_fu_319_p3 when (icmp_ln2122_reg_617(0) = '1') else 
        select_ln2125_fu_326_p3;
    select_ln2125_fu_326_p3 <= 
        ap_const_lv5_8 when (icmp_ln2118_reg_611(0) = '1') else 
        ap_const_lv5_18;
    select_ln2126_1_fu_346_p3 <= 
        select_ln2122_1_fu_333_p3 when (icmp_ln2126_reg_622(0) = '1') else 
        or_ln2126_fu_340_p2;
    select_ln346_fu_546_p3 <= 
        ap_const_lv7_0 when (retval_1_fu_540_p2(0) = '1') else 
        ap_phi_mux_value_6_phi_fu_147_p4;
        sext_ln609_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln5_fu_526_p4),32));

    shl_ln1799_fu_484_p2 <= std_logic_vector(shift_left(unsigned(value_8_fu_454_p3),to_integer(unsigned('0' & zext_ln1794_fu_425_p1(31-1 downto 0)))));
    shl_ln1_fu_387_p3 <= (add_ln609_1_fu_381_p2 & ap_const_lv26_0);
    shl_ln_fu_373_p3 <= (xor_ln2142_fu_368_p2 & ap_const_lv5_0);
    sub10_i_i_i_i_i_i_i_fu_468_p2 <= std_logic_vector(signed(ap_const_lv6_20) - signed(zext_ln1794_1_fu_429_p1));
    sub15_i_i_i_i_i_op_fu_519_p2 <= std_logic_vector(unsigned(ap_const_lv7_1E) - unsigned(zext_ln3157_fu_411_p1));
    t_1_fu_220_p4 <= t_fu_212_p3(31 downto 16);
    t_2_fu_240_p3 <= 
        zext_ln2118_fu_230_p1 when (icmp_ln2118_fu_234_p2(0) = '1') else 
        t_fu_212_p3;
    t_3_fu_248_p4 <= t_2_fu_240_p3(31 downto 8);
    t_4_fu_268_p3 <= 
        zext_ln2122_fu_258_p1 when (icmp_ln2122_fu_262_p2(0) = '1') else 
        t_2_fu_240_p3;
    t_5_fu_306_p3 <= 
        tmp_1_fu_292_p4 when (icmp_ln2126_fu_286_p2(0) = '1') else 
        trunc_ln2126_fu_302_p1;
    t_fu_212_p3 <= 
        xor_ln2116_fu_206_p2 when (grp_fu_163_p3(0) = '1') else 
        select_ln678_loc_fu_96;
    tab_address0 <= zext_ln2130_fu_314_p1(4 - 1 downto 0);

    tab_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            tab_ce0 <= ap_const_logic_1;
        else 
            tab_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_292_p4 <= t_4_fu_268_p3(7 downto 4);
    tmp_4_fu_439_p3 <= add_ln609_fu_395_p2(31 downto 31);
    tmp_fu_554_p4 <= ((select_ln346_fu_546_p3 & ap_const_lv32_0) & sext_ln609_fu_536_p1);
    trunc_ln2126_fu_302_p1 <= t_4_fu_268_p3(4 - 1 downto 0);
    trunc_ln2_fu_276_p4 <= t_4_fu_268_p3(31 downto 4);
    trunc_ln4_fu_401_p4 <= add_ln609_fu_395_p2(31 downto 26);
    trunc_ln5_fu_526_p4 <= ap_phi_mux_f_m_v_v_phi_fu_137_p4(63 downto 39);
    value_1_fu_177_p4 <= from_v_v_read(63 downto 32);
    value_4_fu_478_p2 <= std_logic_vector(shift_left(unsigned(value_7_fu_447_p3),to_integer(unsigned('0' & zext_ln1794_fu_425_p1(31-1 downto 0)))));
    value_5_fu_496_p2 <= (shl_ln1799_fu_484_p2 or lshr_ln1799_fu_490_p2);
    value_7_fu_447_p3 <= 
        ap_const_lv32_0 when (tmp_4_fu_439_p3(0) = '1') else 
        value_reg_582;
    value_8_fu_454_p3 <= 
        value_reg_582 when (tmp_4_fu_439_p3(0) = '1') else 
        value_1_reg_589;
    value_fu_172_p1 <= from_v_v_read(32 - 1 downto 0);
    xor_ln2116_fu_206_p2 <= (select_ln678_loc_fu_96 xor ap_const_lv32_FFFFFFFF);
    xor_ln2142_fu_368_p2 <= (k_2_loc_fu_100 xor ap_const_lv1_1);
    zext_ln1794_1_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(s31_fu_415_p4),6));
    zext_ln1794_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(s31_fu_415_p4),32));
    zext_ln1799_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub10_i_i_i_i_i_i_i_fu_468_p2),32));
    zext_ln2116_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln2126_1_fu_346_p3),6));
    zext_ln2118_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_1_fu_220_p4),32));
    zext_ln2122_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_3_fu_248_p4),32));
    zext_ln2130_1_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tab_q0),6));
    zext_ln2130_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_5_fu_306_p3),64));
    zext_ln3157_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln4_fu_401_p4),7));
end behav;
