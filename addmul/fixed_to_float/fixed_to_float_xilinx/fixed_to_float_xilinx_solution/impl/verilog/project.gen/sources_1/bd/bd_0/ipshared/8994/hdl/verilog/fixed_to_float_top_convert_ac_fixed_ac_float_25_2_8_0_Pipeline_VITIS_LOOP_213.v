// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fixed_to_float_top_convert_ac_fixed_ac_float_25_2_8_0_Pipeline_VITIS_LOOP_213 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        value_1,
        value_r,
        sext_ln2137,
        k_2_out,
        k_2_out_ap_vld,
        select_ln678_out,
        select_ln678_out_ap_vld,
        ap_return
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] value_1;
input  [31:0] value_r;
input  [0:0] sext_ln2137;
output  [0:0] k_2_out;
output   k_2_out_ap_vld;
output  [31:0] select_ln678_out;
output   select_ln678_out_ap_vld;
output  [0:0] ap_return;

reg ap_idle;
reg k_2_out_ap_vld;
reg select_ln678_out_ap_vld;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln2139_fu_141_p2;
wire   [0:0] tmp_fu_118_p3;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [0:0] ap_phi_mux_UnifiedRetVal_phi_fu_89_p4;
reg   [1:0] x_fu_50;
wire   [1:0] k_fu_147_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_k_2;
wire   [31:0] select_ln678_fu_132_p3;
wire   [0:0] icmp_ln678_fu_126_p2;
wire   [31:0] sext_ln2137_cast_fu_97_p3;
reg   [0:0] ap_return_preg;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_return_preg = 1'd0;
#0 ap_done_reg = 1'b0;
end

fixed_to_float_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1) & ((tmp_fu_118_p3 == 1'd1) | (icmp_ln2139_fu_141_p2 == 1'd0)))) begin
            ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_89_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if (((tmp_fu_118_p3 == 1'd0) & (icmp_ln2139_fu_141_p2 == 1'd1))) begin
            x_fu_50 <= k_fu_147_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            x_fu_50 <= 2'd1;
        end
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1) & ((tmp_fu_118_p3 == 1'd1) | (icmp_ln2139_fu_141_p2 == 1'd0)))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if (((tmp_fu_118_p3 == 1'd0) & (icmp_ln2139_fu_141_p2 == 1'd0))) begin
            ap_phi_mux_UnifiedRetVal_phi_fu_89_p4 = 1'd0;
        end else if ((tmp_fu_118_p3 == 1'd1)) begin
            ap_phi_mux_UnifiedRetVal_phi_fu_89_p4 = 1'd1;
        end else begin
            ap_phi_mux_UnifiedRetVal_phi_fu_89_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_UnifiedRetVal_phi_fu_89_p4 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1) & ((tmp_fu_118_p3 == 1'd1) | (icmp_ln2139_fu_141_p2 == 1'd0)))) begin
        ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_89_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_k_2 = 2'd1;
    end else begin
        ap_sig_allocacmp_k_2 = x_fu_50;
    end
end

always @ (*) begin
    if ((((tmp_fu_118_p3 == 1'd0) & (icmp_ln2139_fu_141_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)) | ((tmp_fu_118_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        k_2_out_ap_vld = 1'b1;
    end else begin
        k_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_118_p3 == 1'd0) & (icmp_ln2139_fu_141_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        select_ln678_out_ap_vld = 1'b1;
    end else begin
        select_ln678_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln2139_fu_141_p2 = ((select_ln678_fu_132_p3 == sext_ln2137_cast_fu_97_p3) ? 1'b1 : 1'b0);

assign icmp_ln678_fu_126_p2 = ((ap_sig_allocacmp_k_2 != 2'd0) ? 1'b1 : 1'b0);

assign k_2_out = ap_sig_allocacmp_k_2[0:0];

assign k_fu_147_p2 = ($signed(ap_sig_allocacmp_k_2) + $signed(2'd3));

assign select_ln678_fu_132_p3 = ((icmp_ln678_fu_126_p2[0:0] == 1'b1) ? value_1 : value_r);

assign select_ln678_out = select_ln678_fu_132_p3;

assign sext_ln2137_cast_fu_97_p3 = ((sext_ln2137[0:0] == 1'b1) ? 32'd4294967295 : 32'd0);

assign tmp_fu_118_p3 = ap_sig_allocacmp_k_2[32'd1];

endmodule //fixed_to_float_top_convert_ac_fixed_ac_float_25_2_8_0_Pipeline_VITIS_LOOP_213
