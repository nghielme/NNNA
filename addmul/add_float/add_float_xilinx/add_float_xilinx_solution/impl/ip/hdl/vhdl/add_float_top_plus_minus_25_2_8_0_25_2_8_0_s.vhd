-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity add_float_top_plus_minus_25_2_8_0_25_2_8_0_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (71 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (71 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (95 downto 0) );
end;


architecture behav of add_float_top_plus_minus_25_2_8_0_25_2_8_0_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv33_1FFFFFFFE : STD_LOGIC_VECTOR (32 downto 0) := "111111111111111111111111111111110";
    constant ap_const_lv32_FFFFFFFE : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv26_3FFFFFF : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111111111111111";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv96_0 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_set_fu_242_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln682_fu_926_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln609_4_reg_1017 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln1168_fu_994_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln1168_reg_1025 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal r_v_v_set_fu_107_ap_ready : STD_LOGIC;
    signal r_v_v_set_fu_107_value_r : STD_LOGIC_VECTOR (31 downto 0);
    signal r_v_v_set_fu_107_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal r_v_v_1_set_fu_116_ap_ready : STD_LOGIC;
    signal r_v_v_1_set_fu_116_value_r : STD_LOGIC_VECTOR (31 downto 0);
    signal r_v_v_1_set_fu_116_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal r_v_v_2_set_fu_125_ap_ready : STD_LOGIC;
    signal r_v_v_2_set_fu_125_value_r : STD_LOGIC_VECTOR (31 downto 0);
    signal r_v_v_2_set_fu_125_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal r_v_v_3_set_fu_134_ap_ready : STD_LOGIC;
    signal r_v_v_3_set_fu_134_value_r : STD_LOGIC_VECTOR (31 downto 0);
    signal r_v_v_3_set_fu_134_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal r_v_v_4_set_fu_143_ap_ready : STD_LOGIC;
    signal r_v_v_4_set_fu_143_value_r : STD_LOGIC_VECTOR (31 downto 0);
    signal r_v_v_4_set_fu_143_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal r_v_v_5_set_fu_152_ap_ready : STD_LOGIC;
    signal r_v_v_5_set_fu_152_value_r : STD_LOGIC_VECTOR (31 downto 0);
    signal r_v_v_5_set_fu_152_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal r_v_v_6_set_fu_161_ap_ready : STD_LOGIC;
    signal r_v_v_6_set_fu_161_value_r : STD_LOGIC_VECTOR (31 downto 0);
    signal r_v_v_6_set_fu_161_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal r_v_v_7_set_fu_170_ap_ready : STD_LOGIC;
    signal r_v_v_7_set_fu_170_value_r : STD_LOGIC_VECTOR (31 downto 0);
    signal r_v_v_7_set_fu_170_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal r_v_v_8_set_fu_179_ap_ready : STD_LOGIC;
    signal r_v_v_8_set_fu_179_value_r : STD_LOGIC_VECTOR (31 downto 0);
    signal r_v_v_8_set_fu_179_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal r_v_v_9_set_fu_188_ap_ready : STD_LOGIC;
    signal r_v_v_9_set_fu_188_value_r : STD_LOGIC_VECTOR (31 downto 0);
    signal r_v_v_9_set_fu_188_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal r_v_v_10_set_fu_197_ap_ready : STD_LOGIC;
    signal r_v_v_10_set_fu_197_value_r : STD_LOGIC_VECTOR (31 downto 0);
    signal r_v_v_10_set_fu_197_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal r_v_v_11_set_fu_206_ap_ready : STD_LOGIC;
    signal r_v_v_11_set_fu_206_value_r : STD_LOGIC_VECTOR (31 downto 0);
    signal r_v_v_11_set_fu_206_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal r_v_v_12_set_fu_215_ap_ready : STD_LOGIC;
    signal r_v_v_12_set_fu_215_value_r : STD_LOGIC_VECTOR (31 downto 0);
    signal r_v_v_12_set_fu_215_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal r_v_v_13_set_fu_224_ap_ready : STD_LOGIC;
    signal r_v_v_13_set_fu_224_value_r : STD_LOGIC_VECTOR (31 downto 0);
    signal r_v_v_13_set_fu_224_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal r_v_v_14_set_fu_233_ap_ready : STD_LOGIC;
    signal r_v_v_14_set_fu_233_value_r : STD_LOGIC_VECTOR (31 downto 0);
    signal r_v_v_14_set_fu_233_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_set_fu_242_ap_ready : STD_LOGIC;
    signal grp_set_fu_242_value_r : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_adjust_9_s_fu_252_ap_start : STD_LOGIC;
    signal grp_adjust_9_s_fu_252_ap_done : STD_LOGIC;
    signal grp_adjust_9_s_fu_252_ap_idle : STD_LOGIC;
    signal grp_adjust_9_s_fu_252_ap_ready : STD_LOGIC;
    signal grp_adjust_9_s_fu_252_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_adjust_9_s_fu_252_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln609_reg_98 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln678_2_fu_985_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_adjust_9_s_fu_252_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln609_1_fu_274_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1309_fu_284_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1309_fu_288_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_fu_299_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln678_fu_316_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1377_fu_320_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal l_fu_324_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_2_fu_337_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_353_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln678_fu_345_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln1389_fu_361_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln1389_fu_369_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln678_3_fu_385_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln609_3_fu_416_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1309_1_fu_426_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1309_1_fu_430_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_fu_441_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln678_2_fu_458_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1377_1_fu_462_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal l_1_fu_466_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_5_fu_479_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_495_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln678_1_fu_487_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln1389_1_fu_503_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln1389_1_fu_511_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln678_7_fu_527_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln319_fu_266_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln319_1_fu_408_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal op1_e_fu_404_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal op2_e_fu_546_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal e_dif_fu_562_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal retval_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal retval_1_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal e1_lt_e2_fu_568_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln657_fu_582_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln657_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln657_fu_588_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal e_dif_1_fu_596_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln609_fu_270_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln609_2_fu_412_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal op_sl_fu_608_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal s31_fu_604_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln1845_fu_642_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_660_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal icmp_ln1795_fu_670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_652_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal s31_1_fu_648_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ishift_fu_676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1796_1_fu_682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1796_fu_688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s31_1cast_fu_700_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal and_ln1796_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln1799_fu_704_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal select_ln1807_fu_710_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_12_fu_734_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal icmp_ln1815_fu_744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_726_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ext_fu_756_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1794_1_fu_632_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_i_i_i_i_i507_fu_780_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln658_fu_616_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1794_fu_628_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln1820_fu_790_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1816_fu_764_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1820_fu_786_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1820_fu_800_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1820_1_fu_806_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln1820_fu_796_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal ishift_1_fu_750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1816_1_fu_772_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_8_fu_620_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1796_fu_718_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal select_ln1828_fu_816_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal or_ln1817_fu_832_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1796_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1817_fu_838_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1817_fu_844_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1820_fu_810_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal select_ln1835_fu_824_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal select_ln609_fu_850_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal select_ln665_fu_858_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal select_ln666_fu_866_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln609_fu_874_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln1325_1_fu_542_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln1325_fu_400_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln681_fu_898_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln681_fu_890_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln681_1_fu_904_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln682_fu_920_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln681_2_fu_912_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1309_2_fu_932_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1309_2_fu_936_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_14_fu_947_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln678_5_fu_964_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_977_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_1007_p4 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component add_float_top_set IS
    port (
        ap_ready : OUT STD_LOGIC;
        this_v_read : IN STD_LOGIC_VECTOR (63 downto 0);
        x : IN STD_LOGIC_VECTOR (0 downto 0);
        value_r : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component add_float_top_adjust_9_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        this_m_0_read : IN STD_LOGIC_VECTOR (24 downto 0);
        new_e_0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    r_v_v_set_fu_107 : component add_float_top_set
    port map (
        ap_ready => r_v_v_set_fu_107_ap_ready,
        this_v_read => ap_const_lv64_0,
        x => ap_const_lv1_0,
        value_r => r_v_v_set_fu_107_value_r,
        ap_return => r_v_v_set_fu_107_ap_return);

    r_v_v_1_set_fu_116 : component add_float_top_set
    port map (
        ap_ready => r_v_v_1_set_fu_116_ap_ready,
        this_v_read => r_v_v_set_fu_107_ap_return,
        x => ap_const_lv1_1,
        value_r => r_v_v_1_set_fu_116_value_r,
        ap_return => r_v_v_1_set_fu_116_ap_return);

    r_v_v_2_set_fu_125 : component add_float_top_set
    port map (
        ap_ready => r_v_v_2_set_fu_125_ap_ready,
        this_v_read => ap_const_lv64_0,
        x => ap_const_lv1_0,
        value_r => r_v_v_2_set_fu_125_value_r,
        ap_return => r_v_v_2_set_fu_125_ap_return);

    r_v_v_3_set_fu_134 : component add_float_top_set
    port map (
        ap_ready => r_v_v_3_set_fu_134_ap_ready,
        this_v_read => r_v_v_2_set_fu_125_ap_return,
        x => ap_const_lv1_1,
        value_r => r_v_v_3_set_fu_134_value_r,
        ap_return => r_v_v_3_set_fu_134_ap_return);

    r_v_v_4_set_fu_143 : component add_float_top_set
    port map (
        ap_ready => r_v_v_4_set_fu_143_ap_ready,
        this_v_read => ap_const_lv64_0,
        x => ap_const_lv1_0,
        value_r => r_v_v_4_set_fu_143_value_r,
        ap_return => r_v_v_4_set_fu_143_ap_return);

    r_v_v_5_set_fu_152 : component add_float_top_set
    port map (
        ap_ready => r_v_v_5_set_fu_152_ap_ready,
        this_v_read => r_v_v_4_set_fu_143_ap_return,
        x => ap_const_lv1_1,
        value_r => r_v_v_5_set_fu_152_value_r,
        ap_return => r_v_v_5_set_fu_152_ap_return);

    r_v_v_6_set_fu_161 : component add_float_top_set
    port map (
        ap_ready => r_v_v_6_set_fu_161_ap_ready,
        this_v_read => ap_const_lv64_0,
        x => ap_const_lv1_0,
        value_r => r_v_v_6_set_fu_161_value_r,
        ap_return => r_v_v_6_set_fu_161_ap_return);

    r_v_v_7_set_fu_170 : component add_float_top_set
    port map (
        ap_ready => r_v_v_7_set_fu_170_ap_ready,
        this_v_read => r_v_v_6_set_fu_161_ap_return,
        x => ap_const_lv1_1,
        value_r => r_v_v_7_set_fu_170_value_r,
        ap_return => r_v_v_7_set_fu_170_ap_return);

    r_v_v_8_set_fu_179 : component add_float_top_set
    port map (
        ap_ready => r_v_v_8_set_fu_179_ap_ready,
        this_v_read => ap_const_lv64_0,
        x => ap_const_lv1_0,
        value_r => r_v_v_8_set_fu_179_value_r,
        ap_return => r_v_v_8_set_fu_179_ap_return);

    r_v_v_9_set_fu_188 : component add_float_top_set
    port map (
        ap_ready => r_v_v_9_set_fu_188_ap_ready,
        this_v_read => r_v_v_8_set_fu_179_ap_return,
        x => ap_const_lv1_1,
        value_r => r_v_v_9_set_fu_188_value_r,
        ap_return => r_v_v_9_set_fu_188_ap_return);

    r_v_v_10_set_fu_197 : component add_float_top_set
    port map (
        ap_ready => r_v_v_10_set_fu_197_ap_ready,
        this_v_read => ap_const_lv64_0,
        x => ap_const_lv1_0,
        value_r => r_v_v_10_set_fu_197_value_r,
        ap_return => r_v_v_10_set_fu_197_ap_return);

    r_v_v_11_set_fu_206 : component add_float_top_set
    port map (
        ap_ready => r_v_v_11_set_fu_206_ap_ready,
        this_v_read => r_v_v_10_set_fu_197_ap_return,
        x => ap_const_lv1_1,
        value_r => r_v_v_11_set_fu_206_value_r,
        ap_return => r_v_v_11_set_fu_206_ap_return);

    r_v_v_12_set_fu_215 : component add_float_top_set
    port map (
        ap_ready => r_v_v_12_set_fu_215_ap_ready,
        this_v_read => ap_const_lv64_0,
        x => ap_const_lv1_0,
        value_r => r_v_v_12_set_fu_215_value_r,
        ap_return => r_v_v_12_set_fu_215_ap_return);

    r_v_v_13_set_fu_224 : component add_float_top_set
    port map (
        ap_ready => r_v_v_13_set_fu_224_ap_ready,
        this_v_read => r_v_v_12_set_fu_215_ap_return,
        x => ap_const_lv1_1,
        value_r => r_v_v_13_set_fu_224_value_r,
        ap_return => r_v_v_13_set_fu_224_ap_return);

    r_v_v_14_set_fu_233 : component add_float_top_set
    port map (
        ap_ready => r_v_v_14_set_fu_233_ap_ready,
        this_v_read => ap_const_lv64_0,
        x => ap_const_lv1_0,
        value_r => r_v_v_14_set_fu_233_value_r,
        ap_return => r_v_v_14_set_fu_233_ap_return);

    grp_set_fu_242 : component add_float_top_set
    port map (
        ap_ready => grp_set_fu_242_ap_ready,
        this_v_read => r_v_v_14_set_fu_233_ap_return,
        x => ap_const_lv1_1,
        value_r => grp_set_fu_242_value_r,
        ap_return => grp_set_fu_242_ap_return);

    grp_adjust_9_s_fu_252 : component add_float_top_adjust_9_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_adjust_9_s_fu_252_ap_start,
        ap_done => grp_adjust_9_s_fu_252_ap_done,
        ap_idle => grp_adjust_9_s_fu_252_ap_idle,
        ap_ready => grp_adjust_9_s_fu_252_ap_ready,
        this_m_0_read => trunc_ln609_4_reg_1017,
        new_e_0 => trunc_ln1168_reg_1025,
        ap_return_0 => grp_adjust_9_s_fu_252_ap_return_0,
        ap_return_1 => grp_adjust_9_s_fu_252_ap_return_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg(0) <= '0';
                ap_return_preg(1) <= '0';
                ap_return_preg(2) <= '0';
                ap_return_preg(3) <= '0';
                ap_return_preg(4) <= '0';
                ap_return_preg(5) <= '0';
                ap_return_preg(6) <= '0';
                ap_return_preg(7) <= '0';
                ap_return_preg(8) <= '0';
                ap_return_preg(9) <= '0';
                ap_return_preg(10) <= '0';
                ap_return_preg(11) <= '0';
                ap_return_preg(12) <= '0';
                ap_return_preg(13) <= '0';
                ap_return_preg(14) <= '0';
                ap_return_preg(15) <= '0';
                ap_return_preg(16) <= '0';
                ap_return_preg(17) <= '0';
                ap_return_preg(18) <= '0';
                ap_return_preg(19) <= '0';
                ap_return_preg(20) <= '0';
                ap_return_preg(21) <= '0';
                ap_return_preg(22) <= '0';
                ap_return_preg(23) <= '0';
                ap_return_preg(24) <= '0';
                ap_return_preg(25) <= '0';
                ap_return_preg(26) <= '0';
                ap_return_preg(27) <= '0';
                ap_return_preg(28) <= '0';
                ap_return_preg(29) <= '0';
                ap_return_preg(30) <= '0';
                ap_return_preg(31) <= '0';
                ap_return_preg(64) <= '0';
                ap_return_preg(65) <= '0';
                ap_return_preg(66) <= '0';
                ap_return_preg(67) <= '0';
                ap_return_preg(68) <= '0';
                ap_return_preg(69) <= '0';
                ap_return_preg(70) <= '0';
                ap_return_preg(71) <= '0';
                ap_return_preg(72) <= '0';
                ap_return_preg(73) <= '0';
                ap_return_preg(74) <= '0';
                ap_return_preg(75) <= '0';
                ap_return_preg(76) <= '0';
                ap_return_preg(77) <= '0';
                ap_return_preg(78) <= '0';
                ap_return_preg(79) <= '0';
                ap_return_preg(80) <= '0';
                ap_return_preg(81) <= '0';
                ap_return_preg(82) <= '0';
                ap_return_preg(83) <= '0';
                ap_return_preg(84) <= '0';
                ap_return_preg(85) <= '0';
                ap_return_preg(86) <= '0';
                ap_return_preg(87) <= '0';
                ap_return_preg(88) <= '0';
                ap_return_preg(89) <= '0';
                ap_return_preg(90) <= '0';
                ap_return_preg(91) <= '0';
                ap_return_preg(92) <= '0';
                ap_return_preg(93) <= '0';
                ap_return_preg(94) <= '0';
                ap_return_preg(95) <= '0';
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_adjust_9_s_fu_252_ap_done = ap_const_logic_1))) then 
                                        ap_return_preg(31 downto 0) <= tmp_fu_1007_p4(31 downto 0);                    ap_return_preg(95 downto 64) <= tmp_fu_1007_p4(95 downto 64);
                end if; 
            end if;
        end if;
    end process;


    grp_adjust_9_s_fu_252_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_adjust_9_s_fu_252_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_adjust_9_s_fu_252_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_adjust_9_s_fu_252_ap_ready = ap_const_logic_1)) then 
                    grp_adjust_9_s_fu_252_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_start = ap_const_logic_1) and (icmp_ln682_fu_926_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (icmp_ln682_fu_926_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then
                phi_ln609_reg_98 <= grp_set_fu_242_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                trunc_ln1168_reg_1025 <= trunc_ln1168_fu_994_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                trunc_ln609_4_reg_1017 <= add_ln609_fu_874_p2(25 downto 1);
            end if;
        end if;
    end process;
    ap_return_preg(63 downto 32) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_adjust_9_s_fu_252_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_adjust_9_s_fu_252_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln1309_1_fu_430_p2 <= std_logic_vector(signed(sext_ln1309_1_fu_426_p1) + signed(ap_const_lv9_2));
    add_ln1309_2_fu_936_p2 <= std_logic_vector(signed(sext_ln1309_2_fu_932_p1) + signed(ap_const_lv10_1));
    add_ln1309_fu_288_p2 <= std_logic_vector(signed(sext_ln1309_fu_284_p1) + signed(ap_const_lv9_2));
    add_ln1389_1_fu_511_p2 <= std_logic_vector(unsigned(select_ln678_1_fu_487_p3) + unsigned(select_ln1389_1_fu_503_p3));
    add_ln1389_fu_369_p2 <= std_logic_vector(unsigned(select_ln678_fu_345_p3) + unsigned(select_ln1389_fu_361_p3));
    add_ln609_fu_874_p2 <= std_logic_vector(unsigned(select_ln665_fu_858_p3) + unsigned(select_ln666_fu_866_p3));
    and_ln1796_fu_694_p2 <= (xor_ln1796_fu_688_p2 and icmp_ln1796_1_fu_682_p2);
    and_ln1817_fu_844_p2 <= (xor_ln1817_fu_838_p2 and icmp_ln1796_fu_636_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_adjust_9_s_fu_252_ap_done)
    begin
        if ((grp_adjust_9_s_fu_252_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_adjust_9_s_fu_252_ap_done, ap_CS_fsm_state3)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_adjust_9_s_fu_252_ap_done = ap_const_logic_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_adjust_9_s_fu_252_ap_done, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_adjust_9_s_fu_252_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(grp_adjust_9_s_fu_252_ap_done, ap_CS_fsm_state3, tmp_fu_1007_p4, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_adjust_9_s_fu_252_ap_done = ap_const_logic_1))) then 
            ap_return <= tmp_fu_1007_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    e1_lt_e2_fu_568_p3 <= e_dif_fu_562_p2(31 downto 31);
    e_dif_1_fu_596_p3 <= 
        ap_const_lv32_0 when (or_ln657_fu_576_p2(0) = '1') else 
        select_ln657_fu_588_p3;
    e_dif_fu_562_p2 <= std_logic_vector(unsigned(op1_e_fu_404_p1) - unsigned(op2_e_fu_546_p1));
    ext_fu_756_p3 <= op_sl_fu_608_p3(25 downto 25);
    grp_adjust_9_s_fu_252_ap_start <= grp_adjust_9_s_fu_252_ap_start_reg;

    grp_set_fu_242_value_r_assign_proc : process(ap_CS_fsm_state1, icmp_ln682_fu_926_p2, select_ln678_2_fu_985_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((icmp_ln682_fu_926_p2 = ap_const_lv1_1)) then 
                grp_set_fu_242_value_r <= select_ln678_2_fu_985_p3;
            elsif ((icmp_ln682_fu_926_p2 = ap_const_lv1_0)) then 
                grp_set_fu_242_value_r <= ap_const_lv32_0;
            else 
                grp_set_fu_242_value_r <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_set_fu_242_value_r <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln1795_fu_670_p2 <= "0" when (tmp_10_fu_660_p4 = ap_const_lv26_0) else "1";
    icmp_ln1796_1_fu_682_p2 <= "0" when (s31_1_fu_648_p1 = ap_const_lv5_0) else "1";
    icmp_ln1796_fu_636_p2 <= "0" when (s31_fu_604_p1 = ap_const_lv5_0) else "1";
    icmp_ln1815_fu_744_p2 <= "0" when (tmp_12_fu_734_p4 = ap_const_lv26_0) else "1";
    icmp_ln681_fu_898_p2 <= "1" when (signed(op1_e_fu_404_p1) > signed(op2_e_fu_546_p1)) else "0";
    icmp_ln682_fu_926_p2 <= "0" when (or_ln682_fu_920_p2 = ap_const_lv32_0) else "1";
    ishift_1_fu_750_p2 <= (tmp_11_fu_726_p3 or icmp_ln1815_fu_744_p2);
    ishift_fu_676_p2 <= (tmp_9_fu_652_p3 or icmp_ln1795_fu_670_p2);
    l_1_fu_466_p2 <= std_logic_vector(unsigned(zext_ln1377_1_fu_462_p1) + unsigned(ap_const_lv33_1FFFFFFFE));
    l_fu_324_p2 <= std_logic_vector(unsigned(zext_ln1377_fu_320_p1) + unsigned(ap_const_lv33_1FFFFFFFE));
    lshr_ln1820_fu_790_p2 <= std_logic_vector(shift_right(unsigned(sext_ln658_fu_616_p1),to_integer(unsigned('0' & zext_ln1794_fu_628_p1(31-1 downto 0)))));
    op1_e_fu_404_p1 <= r_v_v_5_set_fu_152_ap_return(32 - 1 downto 0);
    op2_e_fu_546_p1 <= r_v_v_11_set_fu_206_ap_return(32 - 1 downto 0);
    op_sl_fu_608_p3 <= 
        trunc_ln609_fu_270_p1 when (e1_lt_e2_fu_568_p3(0) = '1') else 
        trunc_ln609_2_fu_412_p1;
    or_ln1817_fu_832_p2 <= (tmp_8_fu_620_p3 or ishift_1_fu_750_p2);
    or_ln1820_fu_810_p2 <= (trunc_ln1820_fu_796_p1 or trunc_ln1820_1_fu_806_p1);
    or_ln657_fu_576_p2 <= (retval_fu_550_p2 or retval_1_fu_556_p2);
    or_ln682_fu_920_p2 <= (trunc_ln319_fu_266_p1 or trunc_ln319_1_fu_408_p1);
    r_v_v_10_set_fu_197_value_r <= r_v_v_9_set_fu_188_ap_return(32 - 1 downto 0);
        r_v_v_11_set_fu_206_value_r <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln678_7_fu_527_p4),32));

        r_v_v_12_set_fu_215_value_r <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1309_2_fu_936_p2),32));

    r_v_v_13_set_fu_224_value_r <= 
        ap_const_lv32_FFFFFFFF when (tmp_14_fu_947_p3(0) = '1') else 
        ap_const_lv32_0;
    r_v_v_14_set_fu_233_value_r <= 
        trunc_ln678_5_fu_964_p1 when (icmp_ln682_fu_926_p2(0) = '1') else 
        ap_const_lv32_0;
    r_v_v_1_set_fu_116_value_r <= 
        ap_const_lv32_FFFFFFFF when (tmp_1_fu_299_p3(0) = '1') else 
        ap_const_lv32_0;
    r_v_v_2_set_fu_125_value_r <= std_logic_vector(unsigned(trunc_ln678_fu_316_p1) + unsigned(ap_const_lv32_FFFFFFFE));
        r_v_v_3_set_fu_134_value_r <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1389_fu_369_p2),32));

    r_v_v_4_set_fu_143_value_r <= r_v_v_3_set_fu_134_ap_return(32 - 1 downto 0);
        r_v_v_5_set_fu_152_value_r <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln678_3_fu_385_p4),32));

        r_v_v_6_set_fu_161_value_r <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1309_1_fu_430_p2),32));

    r_v_v_7_set_fu_170_value_r <= 
        ap_const_lv32_FFFFFFFF when (tmp_4_fu_441_p3(0) = '1') else 
        ap_const_lv32_0;
    r_v_v_8_set_fu_179_value_r <= std_logic_vector(unsigned(trunc_ln678_2_fu_458_p1) + unsigned(ap_const_lv32_FFFFFFFE));
        r_v_v_9_set_fu_188_value_r <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1389_1_fu_511_p2),32));

        r_v_v_set_fu_107_value_r <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1309_fu_288_p2),32));

    retval_1_fu_556_p2 <= "1" when (trunc_ln319_1_fu_408_p1 = ap_const_lv32_0) else "0";
    retval_fu_550_p2 <= "1" when (trunc_ln319_fu_266_p1 = ap_const_lv32_0) else "0";
    s31_1_fu_648_p1 <= sub_ln1845_fu_642_p2(5 - 1 downto 0);
    s31_1cast_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(s31_1_fu_648_p1),26));
    s31_fu_604_p1 <= e_dif_1_fu_596_p3(5 - 1 downto 0);
    select_ln1389_1_fu_503_p3 <= 
        ap_const_lv2_3 when (tmp_6_fu_495_p3(0) = '1') else 
        ap_const_lv2_0;
    select_ln1389_fu_361_p3 <= 
        ap_const_lv2_3 when (tmp_3_fu_353_p3(0) = '1') else 
        ap_const_lv2_0;
    select_ln1796_fu_718_p3 <= 
        shl_ln1799_fu_704_p2 when (and_ln1796_fu_694_p2(0) = '1') else 
        select_ln1807_fu_710_p3;
    select_ln1807_fu_710_p3 <= 
        ap_const_lv26_0 when (ishift_fu_676_p2(0) = '1') else 
        op_sl_fu_608_p3;
    select_ln1816_1_fu_772_p3 <= 
        ap_const_lv26_3FFFFFF when (ext_fu_756_p3(0) = '1') else 
        ap_const_lv26_0;
    select_ln1816_fu_764_p3 <= 
        ap_const_lv32_FFFFFFFF when (ext_fu_756_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln1828_fu_816_p3 <= 
        select_ln1816_1_fu_772_p3 when (ishift_1_fu_750_p2(0) = '1') else 
        op_sl_fu_608_p3;
    select_ln1835_fu_824_p3 <= 
        select_ln1796_fu_718_p3 when (tmp_8_fu_620_p3(0) = '1') else 
        select_ln1828_fu_816_p3;
    select_ln609_fu_850_p3 <= 
        or_ln1820_fu_810_p2 when (and_ln1817_fu_844_p2(0) = '1') else 
        select_ln1835_fu_824_p3;
    select_ln657_fu_588_p3 <= 
        sub_ln657_fu_582_p2 when (e1_lt_e2_fu_568_p3(0) = '1') else 
        e_dif_fu_562_p2;
    select_ln665_fu_858_p3 <= 
        select_ln609_fu_850_p3 when (e1_lt_e2_fu_568_p3(0) = '1') else 
        trunc_ln609_fu_270_p1;
    select_ln666_fu_866_p3 <= 
        trunc_ln609_2_fu_412_p1 when (e1_lt_e2_fu_568_p3(0) = '1') else 
        select_ln609_fu_850_p3;
    select_ln678_1_fu_487_p3 <= 
        ap_const_lv2_3 when (tmp_5_fu_479_p3(0) = '1') else 
        ap_const_lv2_0;
    select_ln678_2_fu_985_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_15_fu_977_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln678_fu_345_p3 <= 
        ap_const_lv2_3 when (tmp_2_fu_337_p3(0) = '1') else 
        ap_const_lv2_0;
    select_ln681_1_fu_904_p3 <= 
        trunc_ln1325_fu_400_p1 when (icmp_ln681_fu_898_p2(0) = '1') else 
        trunc_ln1325_1_fu_542_p1;
    select_ln681_2_fu_912_p3 <= 
        select_ln681_fu_890_p3 when (or_ln657_fu_576_p2(0) = '1') else 
        select_ln681_1_fu_904_p3;
    select_ln681_fu_890_p3 <= 
        trunc_ln1325_1_fu_542_p1 when (retval_fu_550_p2(0) = '1') else 
        trunc_ln1325_fu_400_p1;
        sext_ln1309_1_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln609_3_fu_416_p4),9));

        sext_ln1309_2_fu_932_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln681_2_fu_912_p3),10));

        sext_ln1309_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln609_1_fu_274_p4),9));

        sext_ln658_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(op_sl_fu_608_p3),32));

    shl_ln1799_fu_704_p2 <= std_logic_vector(shift_left(unsigned(op_sl_fu_608_p3),to_integer(unsigned('0' & s31_1cast_fu_700_p1(26-1 downto 0)))));
    shl_ln1820_fu_800_p2 <= std_logic_vector(shift_left(unsigned(select_ln1816_fu_764_p3),to_integer(unsigned('0' & zext_ln1820_fu_786_p1(31-1 downto 0)))));
    sub_i_i_i_i_i507_fu_780_p2 <= std_logic_vector(signed(ap_const_lv6_20) - signed(zext_ln1794_1_fu_632_p1));
    sub_ln1845_fu_642_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(e_dif_1_fu_596_p3));
    sub_ln657_fu_582_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(e_dif_fu_562_p2));
    tmp_10_fu_660_p4 <= sub_ln1845_fu_642_p2(31 downto 6);
    tmp_11_fu_726_p3 <= e_dif_1_fu_596_p3(5 downto 5);
    tmp_12_fu_734_p4 <= e_dif_1_fu_596_p3(31 downto 6);
    tmp_14_fu_947_p3 <= add_ln1309_2_fu_936_p2(9 downto 9);
    tmp_15_fu_977_p3 <= r_v_v_13_set_fu_224_ap_return(32 downto 32);
    tmp_1_fu_299_p3 <= add_ln1309_fu_288_p2(8 downto 8);
    tmp_2_fu_337_p3 <= l_fu_324_p2(32 downto 32);
    tmp_3_fu_353_p3 <= r_v_v_1_set_fu_116_ap_return(32 downto 32);
    tmp_4_fu_441_p3 <= add_ln1309_1_fu_430_p2(8 downto 8);
    tmp_5_fu_479_p3 <= l_1_fu_466_p2(32 downto 32);
    tmp_6_fu_495_p3 <= r_v_v_7_set_fu_170_ap_return(32 downto 32);
    tmp_8_fu_620_p3 <= e_dif_1_fu_596_p3(31 downto 31);
    tmp_9_fu_652_p3 <= sub_ln1845_fu_642_p2(5 downto 5);
    tmp_fu_1007_p4 <= ((grp_adjust_9_s_fu_252_ap_return_0 & ap_const_lv32_0) & grp_adjust_9_s_fu_252_ap_return_1);
    trunc_ln1168_fu_994_p1 <= phi_ln609_reg_98(9 - 1 downto 0);
    trunc_ln1325_1_fu_542_p1 <= r_v_v_11_set_fu_206_ap_return(9 - 1 downto 0);
    trunc_ln1325_fu_400_p1 <= r_v_v_5_set_fu_152_ap_return(9 - 1 downto 0);
    trunc_ln1820_1_fu_806_p1 <= shl_ln1820_fu_800_p2(26 - 1 downto 0);
    trunc_ln1820_fu_796_p1 <= lshr_ln1820_fu_790_p2(26 - 1 downto 0);
    trunc_ln319_1_fu_408_p1 <= p_read1(32 - 1 downto 0);
    trunc_ln319_fu_266_p1 <= p_read(32 - 1 downto 0);
    trunc_ln609_1_fu_274_p4 <= p_read(71 downto 64);
    trunc_ln609_2_fu_412_p1 <= p_read1(26 - 1 downto 0);
    trunc_ln609_3_fu_416_p4 <= p_read1(71 downto 64);
    trunc_ln609_fu_270_p1 <= p_read(26 - 1 downto 0);
    trunc_ln678_2_fu_458_p1 <= r_v_v_7_set_fu_170_ap_return(32 - 1 downto 0);
    trunc_ln678_3_fu_385_p4 <= r_v_v_3_set_fu_134_ap_return(33 downto 32);
    trunc_ln678_5_fu_964_p1 <= r_v_v_13_set_fu_224_ap_return(32 - 1 downto 0);
    trunc_ln678_7_fu_527_p4 <= r_v_v_9_set_fu_188_ap_return(33 downto 32);
    trunc_ln678_fu_316_p1 <= r_v_v_1_set_fu_116_ap_return(32 - 1 downto 0);
    xor_ln1796_fu_688_p2 <= (ishift_fu_676_p2 xor ap_const_lv1_1);
    xor_ln1817_fu_838_p2 <= (or_ln1817_fu_832_p2 xor ap_const_lv1_1);
    zext_ln1377_1_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln678_2_fu_458_p1),33));
    zext_ln1377_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln678_fu_316_p1),33));
    zext_ln1794_1_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(s31_fu_604_p1),6));
    zext_ln1794_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(s31_fu_604_p1),32));
    zext_ln1820_fu_786_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_i_i_i_i_i507_fu_780_p2),32));
end behav;
