// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="add_top_add_top,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=50.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=33.828375,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=465,HLS_SYN_LUT=3581,HLS_VERSION=2022_2}" *)

module add_top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a,
        b,
        res,
        res_ap_vld
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] a;
input  [127:0] b;
output  [127:0] res;
output   res_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg res_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [71:0] trunc_ln691_fu_57_p1;
reg   [71:0] trunc_ln691_reg_72;
wire   [71:0] trunc_ln691_1_fu_62_p1;
reg   [71:0] trunc_ln691_1_reg_77;
wire    grp_plus_minus_25_2_8_0_25_2_8_0_s_fu_49_ap_start;
wire    grp_plus_minus_25_2_8_0_25_2_8_0_s_fu_49_ap_done;
wire    grp_plus_minus_25_2_8_0_25_2_8_0_s_fu_49_ap_idle;
wire    grp_plus_minus_25_2_8_0_25_2_8_0_s_fu_49_ap_ready;
wire   [95:0] grp_plus_minus_25_2_8_0_25_2_8_0_s_fu_49_ap_return;
reg    grp_plus_minus_25_2_8_0_25_2_8_0_s_fu_49_ap_start_reg;
wire    ap_CS_fsm_state2;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 grp_plus_minus_25_2_8_0_25_2_8_0_s_fu_49_ap_start_reg = 1'b0;
end

add_top_plus_minus_25_2_8_0_25_2_8_0_s grp_plus_minus_25_2_8_0_25_2_8_0_s_fu_49(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_plus_minus_25_2_8_0_25_2_8_0_s_fu_49_ap_start),
    .ap_done(grp_plus_minus_25_2_8_0_25_2_8_0_s_fu_49_ap_done),
    .ap_idle(grp_plus_minus_25_2_8_0_25_2_8_0_s_fu_49_ap_idle),
    .ap_ready(grp_plus_minus_25_2_8_0_25_2_8_0_s_fu_49_ap_ready),
    .p_read(trunc_ln691_reg_72),
    .p_read1(trunc_ln691_1_reg_77),
    .ap_return(grp_plus_minus_25_2_8_0_25_2_8_0_s_fu_49_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_plus_minus_25_2_8_0_25_2_8_0_s_fu_49_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_plus_minus_25_2_8_0_25_2_8_0_s_fu_49_ap_start_reg <= 1'b1;
        end else if ((grp_plus_minus_25_2_8_0_25_2_8_0_s_fu_49_ap_ready == 1'b1)) begin
            grp_plus_minus_25_2_8_0_25_2_8_0_s_fu_49_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        trunc_ln691_1_reg_77 <= trunc_ln691_1_fu_62_p1;
        trunc_ln691_reg_72 <= trunc_ln691_fu_57_p1;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_plus_minus_25_2_8_0_25_2_8_0_s_fu_49_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_plus_minus_25_2_8_0_25_2_8_0_s_fu_49_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_plus_minus_25_2_8_0_25_2_8_0_s_fu_49_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((grp_plus_minus_25_2_8_0_25_2_8_0_s_fu_49_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        res_ap_vld = 1'b1;
    end else begin
        res_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_plus_minus_25_2_8_0_25_2_8_0_s_fu_49_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign grp_plus_minus_25_2_8_0_25_2_8_0_s_fu_49_ap_start = grp_plus_minus_25_2_8_0_25_2_8_0_s_fu_49_ap_start_reg;

assign res = grp_plus_minus_25_2_8_0_25_2_8_0_s_fu_49_ap_return;

assign trunc_ln691_1_fu_62_p1 = b[71:0];

assign trunc_ln691_fu_57_p1 = a[71:0];

endmodule //add_top
